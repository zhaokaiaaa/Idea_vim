" ================================================================================================
" = plug settings =====================================
 ================================================================================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'easymotion/vim-easymotion'
Plug 'machakann/vim-highlightedyank'
set quickscope
set multicursor
let g:highlightedyank_highlight_duration = "1000"
let g:highlightedyank_highlight_color = "rgba(227, 175, 188,  150)"
let g:qs_primary_color = '#AA4C8F'
let g:qs_secondary_color = '#AA4C8F'
nmap <C-A-n> <Plug>(multicursor-ms/)

" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
let mapleader=" "
" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set showmode
set clipboard+=unnamed
set scrolloff=10
set history=200
"忽略大小写
set ignorecase
"智能匹配
set smartcase
"行号
set number
"相对行号
set relativenumber
set incsearch
set hlsearch
"默认分屏
set splitright
set splitbelow
"突出显示当前行
set cursorline
"keep in English
set keep-english-in-normal
set keep-english-in-normal-and-restore-in-insert
"置空s键
nmap s <nop>
nmap S <nop>
nmap <leader>s <Plug>(easymotion-s)

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
" Use ctrl-c as an ide shortcut in normal and visual modes
sethandler <C-C> v:ide
sethandler <C-A> n:ide
sethandler <C-V> i:ide
" ================================================================================================
" = No Leader Keymaps =====================================
" ================================================================================================
nmap ge <action>(GotoNextError)
nmap gt <action>(GotoTest)
nmap gm <action>(MethodDown)
nmap gM <action>(MethodUp)
nmap gi <action>(GotoImplementation)
nmap gb <action>(Back)
nmap gf <action>(Forward)
" last changed in current buffer(file)
nmap ga '.
map <C-s> :w<CR>
map L <action>(NextTab)
map H <action>(PreviousTab)
"展示菜单
nmap <silent> sm <action>(ShowPopupMenu)
nmap <silent> sf <action>(RevealIn)
map <silent> K 5k
map <silent> J 5j
" Faster in-line navigation
nmap W 5w
nmap B 5b

" gh key: go to the first word the line
map <silent> gh ^
" gl key: go to the end of the line
map <silent> gl $

" ==============================================================================================
" = Window management =====================================
" ================================================================================================
" Resize splits with arrow keys
nmap <up> :res +5<CR>
nmap <down> :res -5<CR>
nmap <left> :vertical resize-5<CR>
nmap <right> :vertical resize+5<CR>
" split windows
nmap sj :set splitbelow<CR>:split<CR>
nmap sk :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
nmap sh :set splitright<CR>:vsplit<CR>
nmap sl :set nosplitright<CR>:vsplit<CR>:set splitright<CR>

" ================================================================================================
" 👻👻👻 Which-Key 👻👻👻
" ================================================================================================
set which-key
set notimeout
nmap <ESC> :nohl<CR>

let g:WhichKeyDesc_CommentByLineComment = "<leader>;; CommentByLineComment"
nmap <leader>;; :action CommentByLineComment<CR>

" a:
let g:WhichKeyDesc_Select = "<leader>A SelectAll"
nmap <leader>A maggVG

" e: Toggle Explorer ⭐️
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e 展示文件菜单"
nmap <leader>e :NERDTreeFocus<CR>


" f: Find/Format ⭐️;
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormatOrFile"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff 打开文件搜索框"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_FileStructure = "<leader>fs 文件结构"
nmap <leader>fs <action>(FileStructurePopup)
let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl 跳转到文件所在位菜单的位置"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>fw 在项目中查找文本"
nmap <leader>fw <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc 打开操作查找框"
nmap <leader>fa <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp 打开项目窗口"
nmap <leader>fp <action>(OpenProjectWindows)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm 格式化代码"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

" g: Git ⭐️
let g:WhichKeyDesc_Git = "<leader>g Git"
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr RollbackHunk"
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>

" i: Insert ⭐️
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>i f(

"n: new Class with ncNewClass
let g:WhichKeyDesc_NewClass ="<leader>nc NewClass"
nmap <leader>nc :action NewClass<CR>
" p: paste
let g:WhichKeyDesc_PasteFromSelectAll = "<leader>P PasteFromSelectAll"
nmap <leader>P "bp
" q :quit
let g:WhichKeyDesc_Quit ="<leader>Quit"
nmap <leader>q :wq<CR>
" r: Run/Re ⭐️
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_ReDebug = "<leader>rd RunDebug"
nmap <leader>rd <action>(ChooseDebugConfiguration)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>re Rename"
nmap <leader>re <action>(RenameElement)
let g:WhichKeyDesc_RecentFiles= "<leader>rf RecentFiles"
nmap <leader>rf <action>(RecentFiles)

let g:WhichKeyDesc_Show_ParameterInfo = "<leader>pi ShowParameterInfo"
nmap <leader>pi <action>(ParameterInfo)

" u: upper lower ⭐️
let g:WhichKeyDesc_UpperAndLower = "<leader>u UpperAndLower"
let g:WhichKeyDesc_UpperAndLower_Upper = "<leader>U Upper"
nmap <leader>U viwU
let g:WhichKeyDesc_UpperAndLower_Lower = "<leader>u Lower"
nmap <leader>u viwu

" w: Window ⭐️
" window options
nmap <leader>wj <C-W>j
nmap <leader>wk <C-W>k
nmap <leader>wh <C-W>h
nmap <leader>wl <C-W>l
let g:WhichKeyDesc_Windows = "<leader>w Windows"
let g:WhichKeyDesc_Windows_CloseAllWindow = "<leader>ww CloseWindow"
nmap <leader>ww <c-w>c
let g:WhichKeyDesc_CloseThisWindow = "<leader>c CloseThisWindow"
nmap <leader>wc :q!<CR>

" y: copy all
let g:WhichKeyDesc_CopyAll = "<leader>Y Copy All"
nmap <leader>Y maggVG"by

" z: regions ⭐️
let g:WhichKeyDesc_Regions="<leader>z Regions"
let g:WhichKeyDesc_ExpandAllRegions= "<leader> zo ExpandAllRegions"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_CollapseAllRegions= "<leader> zc CollapseAllRegions"
nmap <leader>zc <action>(CollapseAllRegions)

imap ,; <ESC>A;<ESC>
"===================================================================================
"========= 插件使用介绍 =========
"===================================================================================
"========= NERTTree =========
" NERDTree提供了丰富的键盘操作方式来浏览和打开文件，介绍一些常用的快捷键：
"   和编辑文件一样，通过h j k l移动光标定位
"   打开关闭文件或者目录，如果是文件的话，光标出现在打开的文件中
"   go 效果同上，不过光标保持在文件目录里，类似预览文件内容的功能
"   i和s可以水平分割或纵向分割窗口打开文件，前面加g类似go的功能
"   t 在标签页中打开
"   T 在后台标签页中打开
"   p 到上层目录
"   P 到根目录
"   K 到同目录第一个节点
"   J 到同目录最后一个节点
"   m 显示文件系统菜单（添加、删除、移动操作）
"   ? 帮助
"   q 关闭

"| Key     |  Description                                            |  Map Setting                   |
"|---------|---------------------------------------------------------|--------------------------------|
"| `o`     |  Open files, directories and bookmarks                  | `g:NERDTreeMapActivateNode`    |
"| `go`    |  Open selected file, but leave cursor in the NERDTree   | `g:NERDTreeMapPreview`         |
"| `t`     |  Open selected node/bookmark in a new tab               | `g:NERDTreeMapOpenInTab`       |
"| `T`     |  Same as 't' but keep the focus on the current tab      | `g:NERDTreeMapOpenInTabSilent` |
"| `i`     |  Open selected file in a split window                   | `g:NERDTreeMapOpenSplit`       |
"| `gi`    |  Same as i, but leave the cursor on the NERDTree        | `g:NERDTreeMapPreviewSplit`    |
"| `s`     |  Open selected file in a new vsplit                     | `g:NERDTreeMapOpenVSplit`      |
"| `gs`    |  Same as s, but leave the cursor on the NERDTree        | `g:NERDTreeMapPreviewVSplit`   |
"| `O`     |  Recursively open the selected directory                | `g:NERDTreeMapOpenRecursively` |
"| `x`     |  Close the current nodes parent                         | `g:NERDTreeMapCloseDir`        |
"| `X`     |  Recursively close all children of the current node     | `g:NERDTreeMapCloseChildren`   |
"| `P`     |  Jump to the root node                                  | `g:NERDTreeMapJumpRoot`        |
"| `p`     |  Jump to current nodes parent                           | `g:NERDTreeMapJumpParent`      |
"| `K`     |  Jump up inside directories at the current tree depth   | `g:NERDTreeMapJumpFirstChild`  |
"| `J`     |  Jump down inside directories at the current tree depth | `g:NERDTreeMapJumpLastChild`   |
"| `<C-J>` |  Jump down to next sibling of the current directory     | `g:NERDTreeMapJumpNextSibling` |
"| `<C-K>` |  Jump up to previous sibling of the current directory   | `g:NERDTreeMapJumpPrevSibling` |
"| `r`     |  Recursively refresh the current directory              | `g:NERDTreeMapRefresh`         |
"| `R`     |  Recursively refresh the current root                   | `g:NERDTreeMapRefreshRoot`     |
"| `m`     |  Display the NERDTree menu                              | `g:NERDTreeMapMenu`            |
"| `q`     |  Close the NERDTree window                              | `g:NERDTreeMapQuit`            |
"| `A`     |  Zoom (maximize/minimize) the NERDTree window           | `g:NERDTreeMapToggleZoom`      |

"========= vim.surround =========
"   It's easiest to explain with examples. Press cs"' inside
"   "Hello world!"
"   to change it to
"   'Hello world!'

"   Now press cs'<q> to change it to
"   <q>Hello world!</q>
"   To go full circle, press cst" to get
"   "Hello world!"

"   To remove the delimiters entirely, press ds".
"   Hello world!

"   Now with the cursor on "Hello", press ysiw] (iw is a text object).
"   [Hello] world!

"   Let's make that braces and add some space (use } instead of { for no space): cs]{
"   { Hello } world!

"   Now wrap the entire line in parentheses with yssb or yss).
"   ({ Hello } world!)

"   Revert to the original text: ds{ds)
"   Hello world!

"   Emphasize hello: ysiw<em>
"   <em>Hello</em> world!